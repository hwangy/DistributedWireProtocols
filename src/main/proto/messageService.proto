syntax = "proto3";

option java_multiple_files = true;
option java_package = "messenger.grpc";
option java_outer_classname = "MessengerProto";

package grpc;

// The Messenger service which contains all of the methods of
// creating an account, deleting an account, getting accounts with a text wildcard,
// getting undelivered messages for a user, sending messages, logging in, and logging out.
service Messenger {
  rpc CreateAccount (CreateAccountRequest) returns (LoginReply) {}
  rpc DeleteAccount (DeleteAccountRequest) returns (StatusReply) {}
  rpc GetAccounts (GetAccountsRequest) returns (GetAccountsReply) {}
  rpc GetUndeliveredMessages (GetUndeliveredMessagesRequest) returns (GetUndeliveredMessagesReply) {}
  rpc SendMessage (SendMessageRequest) returns (StatusReply) {}
  rpc Login (LoginRequest) returns (LoginReply) {}
  rpc Logout (LogoutRequest) returns (StatusReply) {}
  rpc Handshake (HandshakeRequest) returns (HandshakeResponse) {}
  rpc MarkAsPrimary (SetPrimaryRequest) returns (StatusReply) {}
}

// Separate service for which the clients act *as the service.*
// This allows the server to call `SendMessage` to send a message
// to the correct client.
service MessageReceiver {
  rpc SendMessage (Message) returns (StatusReply) {}
}

message SetPrimaryRequest {
}

message HandshakeRequest {
}

message HandshakeResponse {
  bool isPrimary = 1;
}

// Indicates the success or failure of a request, with optional message
message Status {
  bool success = 1;
  optional string message = 2;
}

// A reply which is used for requests which only return a status.
message StatusReply {
  Status status = 1;
}

// A request which is used for creating an account
message CreateAccountRequest {
  string username = 1;
}

// When the user logs in, the client replies with a unique
// port (if the IP address is duplicated) for the client to use
// to establish the MessageReceiver.
message LoginReply {
  int32 receiver_port = 1;
  Status status = 2;
}

// A request which is used for deleting an account
message DeleteAccountRequest {
  string username = 2;
}

// A request which is used for getting accounts assocated to a text wildcard
message GetAccountsRequest {
  string text_wildcard = 2;
}

// A reply which is associated to getting accounts
message GetAccountsReply {
  Status status = 1;
  repeated string accounts = 2;
}

// A request which is used for getting the undelivered messages for a particular user
message GetUndeliveredMessagesRequest {
  int32 connection_id = 1;
  string username = 2;
}

// A reply which is associated to getting the undelivered messages
message GetUndeliveredMessagesReply {
  Status status = 1;
  repeated Message messages = 2;
}

// The Message contains information about the sender, recipeint, and message contents
// for a message being sent, as well as the sent timestamp and delivered timestamp.
message Message {
  int64 sent_timestamp = 1;
  string sender = 2;
  string recipient = 3;
  string message = 4;
  optional int64 delivered_timestamp = 5;
}

// A request which is used for sending a message
message SendMessageRequest {
  Message message = 2;
}

// A request which is used for logging in a user
message LoginRequest {
  string ip_address = 1;
  string username = 2;
}

// A request which is used for logging out a user
message LogoutRequest {
  string username = 2;
}